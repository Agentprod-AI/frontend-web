import React, { useEffect, useState } from "react";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import {
  ResizableHandle,
  ResizablePanel,
  ResizablePanelGroup,
} from "@/components/ui/resizable";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useUserContext } from "@/context/user-context";
import axios from "axios";
import { useAutoGenerate } from "@/context/auto-generate-mail";
import { useParams } from "next/navigation";
import { PeopleProfileSheet } from "@/components/people-profile-sheet";
import { Textarea } from "@/components/ui/textarea";
import { useFieldsList } from "@/context/training-fields-provider";
import { LoadingCircle } from "@/app/icons";
import {
  getAutogenerateTrainingEmail,
  getPreviewByTemplate,
} from "./training.api";
import { toast } from "sonner";
import axiosInstance from "@/utils/axiosInstance";

function PreviewContent() {
  const { user } = useUserContext();
  const {
    autoGeneratedFollowUp,
    setAutoGeneratedFollowUp,
    setAutoGeneratedFollowUpTwo,
    autoGeneratedFollowUpTwo,
    autoGeneratedBody,
    autoGeneratedSubject,
    setAutoGeneratedBody,
    setAutoGeneratedSubject,
    contact,
    setContact,
    linkedinInformation,
    setLinkedinInformation,
    posts,
    setPosts,
    previewType,
  } = useAutoGenerate();
  const params = useParams<{ campaignId: string }>();
  const { fieldsList, body, subject } = useFieldsList();
  const [load1, setLoad1] = useState(false);
  const [load2, setLoad2] = useState(false);
  const [campaignType, setCampaignType] = useState("");
  const [loadingNewPreview, setLoadingNewPreview] = useState(false);

  useEffect(() => {
    const fetchCampaign = async () => {
      const id = params.campaignId;
      if (id) {
        try {
          const response = await fetch(
            `${process.env.NEXT_PUBLIC_SERVER_URL}v2/campaigns/${id}`
          );

          const data = await response.json();
          console.log(data, "ress");
          if (response.ok) {
            setCampaignType(data.campaign_type);
          } else {
            toast.error("Failed to fetch campaign data");
          }
        } catch (error) {
          console.error("Error fetching campaign:", error);
          toast.error("An error occurred while fetching campaign data");
        }
      }
    };

    fetchCampaign();
  }, [params.campaignId]);

  useEffect(() => {
    if (previewType === "previewFromAI") {
      fetchFollowUpData();
    }
  }, [previewType]);

  const fetchFollowUpData = async () => {
    try {
      setLoad1(true);
      const response1 = await axiosInstance.post(
        "/v2/training/autogenerate/followup",
        {
          user_id: user.id,
          follow_up_number: 1,
          previous_emails: [
            {
              subject: autoGeneratedSubject,
              body: autoGeneratedBody,
            },
          ],
        }
      );
      setAutoGeneratedFollowUp(`${response1.data.body}`);
      setLoad1(false);
      setLoad2(true);

      const response2 = await axiosInstance.post(
        "/v2/training/autogenerate/followup",
        {
          user_id: user.id,
          follow_up_number: 2,
          previous_emails: [
            {
              subject: autoGeneratedSubject,
              body: autoGeneratedBody,
            },
            { subject: response1.data.subject, body: response1.data.body },
          ],
        }
      );
      setAutoGeneratedFollowUpTwo(`${response2.data.body}`);
      setLoad2(false);
    } catch (error) {
      console.error("Error making the API call:", error);
    }
  };

  const newPreview = async () => {
    setLoadingNewPreview(true);
    try {
      if (previewType === "previewFromTemplate") {
        toast.success("Regenerating preview");

        const response = await getPreviewByTemplate({
          campaign_id: params.campaignId,
          user_id: user.id,
          template: `Subject: ${subject}\nBody: ${body}`,
          variables: fieldsList.variables,
          offering_variables: fieldsList.offering_variables,
          personalized_fields: fieldsList.personalized_fields,
          enriched_fields: fieldsList.enriched_fields,
        });
        setAutoGeneratedBody(response.email.body);
        setAutoGeneratedSubject(response.email.subject);
        setContact(response.contact);
        setLinkedinInformation(response.linkedin_information);
        setPosts(response.posts)
        setAutoGeneratedFollowUp(`${response.first_follow_up.body}`);
        setAutoGeneratedFollowUpTwo(`${response.second_follow_up.body}`);
      } else {
        toast.success("Regenerating preview");
        const response = await getAutogenerateTrainingEmail(
          params.campaignId,
          user.id
        );

        setAutoGeneratedBody(response.email.body);
        setAutoGeneratedSubject(response.email.subject);
        setContact(response.contact);
        setLinkedinInformation(response.linkedin_information);
        setPosts(response.posts)
        console.log(`Responses : ${response.posts}`)

        try {
          setLoad1(true);
          const response1 = await axiosInstance.post(
            "/v2/training/autogenerate/followup",
            {
              user_id: user.id,
              follow_up_number: 1,
              previous_emails: [
                {
                  subject: response.email.subject,
                  body: response.email.body,
                },
              ],
            }
          );
          setAutoGeneratedFollowUp(`${response1.data.body}`);
          setLoad1(false);
          setLoad2(true);

          const response2 = await axiosInstance.post(
            "/v2/training/autogenerate/followup",
            {
              user_id: user.id,
              follow_up_number: 2,
              previous_emails: [
                {
                  subject: response.email.subject,
                  body: response.email.body,
                },
                { subject: response1.data.subject, body: response1.data.body },
              ],
            }
          );
          setAutoGeneratedFollowUpTwo(`${response2.data.body}`);
          setLoad2(false);
        } catch (error) {
          console.error("Error making the API call:", error);
        }
      }
    } catch (error) {
      console.error("Failed to fetch training data:", error);
    } finally {
      setLoadingNewPreview(false);
    }
  };

  return (
    <ResizablePanelGroup direction="horizontal" className="">
      <ResizablePanel defaultSize={70}>
        <div className="flex justify-center p-6">
          <div className="flex-col w-full">
            <div className="flex justify-end">
              <Button onClick={newPreview}>
                {loadingNewPreview ? <LoadingCircle /> : "New preview"}
              </Button>
            </div>
            <div className="flex mt-2 items-center">
              <Avatar className="flex h-10 w-10 items-center justify-center space-y-0 border bg-white mr-2 mt-1">
                <AvatarFallback>{user?.firstName?.[0]}</AvatarFallback>
              </Avatar>
              <Input
                placeholder="Subject"
                className="flex-1 h-12"
                value={autoGeneratedSubject || ""}
                readOnly
              />
            </div>
            <div className="flex flex-col gap-2 mt-3">
              <div className="my-2">Main Email</div>
              <Textarea
                className="h-[300px]"
                value={autoGeneratedBody || ""}
                readOnly
              />
            </div>

            {/* <div className="flex flex-col gap-2 mt-3">
              <div className="my-2 flex items-center">
                <span className="mr-4">Follow up 1</span>
                {load1 && <LoadingCircle />}
              </div>

              <Textarea
                className="h-[200px]"
                value={autoGeneratedFollowUp || ""}
                readOnly
              />
            </div>

            <div className="flex flex-col gap-2 mt-3">
              <div className="my-2 flex items-center">
                <span className="mr-4">Follow up 2</span>
                {load2 && <LoadingCircle />}
              </div>
              <Textarea
                className="h-[200px]"
                value={autoGeneratedFollowUpTwo || ""}
                readOnly
              />
            </div> */}
            {campaignType !== "Nurturing" && (
              <>
                <div className="flex flex-col gap-2 mt-3">
                  <div className="my-2 flex items-center">
                    <span className="mr-4">Follow up 1</span>
                    {load1 && <LoadingCircle />}
                  </div>

                  <Textarea
                    className="h-[200px]"
                    value={autoGeneratedFollowUp || ""}
                    readOnly
                  />
                </div>

                <div className="flex flex-col gap-2 mt-3">
                  <div className="my-2 flex items-center">
                    <span className="mr-4">Follow up 2</span>
                    {load2 && <LoadingCircle />}
                  </div>
                  <Textarea
                    className="h-[200px]"
                    value={autoGeneratedFollowUpTwo || ""}
                    readOnly
                  />
                </div>
              </>
            )}
          </div>
        </div>
      </ResizablePanel>
      <ResizableHandle withHandle />
      <ResizablePanel defaultSize={30}>
        <div className="flex h-full items-center">
          {contact && linkedinInformation && (
            <PeopleProfileSheet
              data={contact}
              companyInfoProp={linkedinInformation}
              posts={posts}
            />
          )}
        </div>
      </ResizablePanel>
    </ResizablePanelGroup>
  );
}

export default PreviewContent;
